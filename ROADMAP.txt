- Complete functions for getting combinatorial and adjacent pairs
	- fix any problems with shapes, test more thoroughly
	- add the ability of recursion to it
- Create a selection of distance functions that work with NMatrix etc
- These should be implementation-agnostic
- Ideally they should be of the symbol/method format, where the user passes a symbol of the method to the metric
- Create a Metric class, perhaps as a subclass of Proc
- What does it mean to subclass Proc?
- Do some research.
	- What about subclassing Method? What would that give us?
- Instead of a "factory" class, the creation of the metric should take place in its initialization. 
	- Metric.new should take arguments similar to DistConfig, but with a specific implementation of OLM, OCM, etc. 
	- This is out of a desire to tie the selection of the logic into the distance function.
	- However, there could be MM.ocm, MM.olm, etc., functions that are "factories" that call the normal instantiation method. But it should not be possible to create a metric without the DistConfig in instantiation.

Implementation and interface requirements:
- Objects should implement [] and #each
- Objects should implement whatever distance method is called by the Metric

Additional distance functions should (ideally) be in their own gems.
